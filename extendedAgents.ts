/*
 * Additional agents for workflow and backlog generation.
 *
 * WorkflowGeneratorAgent: accepts an array of user story strings and
 * converts them into a structured workflow. Each workflow step
 * includes an id, a description and placeholder fields for required
 * tools, involved agents or humans. In a real implementation,
 * additional information (data entries, functions, etc.) would be
 * derived from the context of the user stories.
 *
 * BacklogGeneratorAgent: accepts a workflow and a repository name
 * (e.g. "owner/repo") and creates backlog items. The simplified
 * logic here generates one backlog task per workflow step. In
 * production, this agent could leverage repository analysis
 * (e.g. reading code files or issue history via a MCP server) to
 * generate richer backlog entries and avoid duplication.
 */

export interface WorkflowStep {
  id: number;
  description: string;
  requiredTools: string[];
  assignedAgents: string[];
}

export interface BacklogItem {
  title: string;
  description: string;
  estimate: string;
}

export class WorkflowGeneratorAgent {
  /**
   * Create a simple workflow from user stories. Each story becomes a
   * step with a sequential id. Adjust this logic to match your
   * organisation's workflow standards.
   *
   * @param userStories The list of user stories generated by the previous agent.
   * @returns A promise resolving to an array of workflow steps.
   */
  async createWorkflow(userStories: string[]): Promise<WorkflowStep[]> {
    return userStories.map((story, index) => {
      return {
        id: index + 1,
        description: `Step ${index + 1}: ${story}`,
        requiredTools: ['toolA', 'toolB'],
        assignedAgents: ['agentX'],
      } as WorkflowStep;
    });
  }
}

export class BacklogGeneratorAgent {
  /**
   * Generate backlog items from a workflow. The repository name
   * parameter is included for future expansion; in this simplified
   * implementation it is only used in the description field.
   *
   * @param workflow An array of workflow steps produced by WorkflowGeneratorAgent.
   * @param repo The repository (e.g. "username/repo") whose context
   * should be considered when generating backlog tasks.
   * @returns A promise resolving to an array of backlog items.
   */
  async createBacklog(
    workflow: WorkflowStep[],
    repo: string
  ): Promise<BacklogItem[]> {
    return workflow.map((step) => {
      return {
        title: `Task for ${step.description}`,
        description: `Use the codebase in ${repo} to implement: ${step.description}`,
        estimate: '3d',
      } as BacklogItem;
    });
  }
}